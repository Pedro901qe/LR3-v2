import tkinter as tk
from tkinter import filedialog, ttk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg


class DataProcessor:
    def __init__(self, filename):
        self.filename = filename
        self.data = None

    def load_data(self):
        try:
            with open(self.filename, 'r') as f:
                self.data = [line.strip().split(';') for line in f]
            return True
        except FileNotFoundError:
            print(f"Ошибка: файл {self.filename} не найден.")
            return False
        except Exception as e:
            print(f"Ошибка при загрузке данных: {e}")
            return False


class CurrencyDataProcessor(DataProcessor):
    def __init__(self, filename):
        super().__init__(filename)
        self.currency_data = None

    def load_data(self):
        if not super().load_data():
            return False  # Если ошибка при загрузке базовых данных, выходим

        try:
            self.currency_data = []
            for row in self.data[1:]:  # Пропускаем заголовок (если есть)
                try:
                    date, currency1, currency2 = row
                    self.currency_data.append({
                        'date': date,
                        'currency1': float(currency1),
                        'currency2': float(currency2)
                    })
                except ValueError:
                    print(f"Ошибка при обработке строки: {row}.  Пропускаем.")
                    continue
            return True
        except Exception as e:
            print(f"Ошибка обработки данных о валютах: {e}")
            return False


    def process_data(self):
        if not self.currency_data:
            return  # Нет данных для обработки

        max_change_currency1 = {'value': 0, 'date': None}
        max_change_currency2 = {'value': 0, 'date': None}
        min_change_currency1 = {'value': 0, 'date': None}
        min_change_currency2 = {'value': 0, 'date': None}

        for i in range(1, len(self.currency_data)):
            change_currency1 = self.currency_data[i]['currency1'] - self.currency_data[i-1]['currency1']
            change_currency2 = self.currency_data[i]['currency2'] - self.currency_data[i-1]['currency2']

            if change_currency1 > max_change_currency1['value']:
                max_change_currency1['value'] = change_currency1
                max_change_currency1['date'] = self.currency_data[i]['date']
            if change_currency1 < min_change_currency1['value']:
                min_change_currency1['value'] = change_currency1
                min_change_currency1['date'] = self.currency_data[i]['date']
            if change_currency2 > max_change_currency2['value']:
                max_change_currency2['value'] = change_currency2
                max_change_currency2['date'] = self.currency_data[i]['date']
            if change_currency2 < min_change_currency2['value']:
                min_change_currency2['value'] = change_currency2
                min_change_currency2['date'] = self.currency_data[i]['date']

        return max_change_currency1, max_change_currency2, min_change_currency1, min_change_currency2


    def display_data(self, text_area):
        if not self.currency_data:
            text_area.insert(tk.END, "Нет данных для отображения.\n")
            return

        text_area.insert(tk.END, "Данные о курсе валют:\n")
        for item in self.currency_data:
            text_area.insert(tk.END, f"Дата: {item['date']}, Валюта1: {item['currency1']}, Валюта2: {item['currency2']}\n")

    def create_graph(self, frame):
      if not self.currency_data:
          return

      dates = [item['date'] for item in self.currency_data]
      currency1_values = [item['currency1'] for item in self.currency_data]
      currency2_values = [item['currency2'] for item in self.currency_data]

      fig, ax = plt.subplots(figsize=(6, 4))  # Create a figure and an axes
      ax.plot(dates, currency1_values, label='Валюта 1')
      ax.plot(dates, currency2_values, label='Валюта 2')
      ax.set_xlabel('Дата')
      ax.set_ylabel('Курс')
      ax.set_title('Изменение курса валют')
      ax.tick_params(axis='x', rotation=45)
      ax.legend()  # Add a legend to the plot
      fig.tight_layout()  # Adjust layout to make room for labels

      canvas = FigureCanvasTkAgg(fig, master=frame)
      canvas.draw()
      canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)



class PopulationDataProcessor(DataProcessor):
    def __init__(self, filename):
        super().__init__(filename)
        self.population_data = None

    def load_data(self):
        if not super().load_data():
            return False
        try:
            self.population_data = []
            for row in self.data[1:]:  # Skip header
                try:
                    year, population = row
                    self.population_data.append({
                        'year': int(year),
                        'population': int(population)
                    })
                except ValueError:
                    print(f"Ошибка при обработке строки: {row}.  Пропускаем.")
                    continue
            return True
        except Exception as e:
            print(f"Ошибка при обработке данных о населении: {e}")
            return False

    def process_data(self):
        if not self.population_data:
            return  # Нет данных для обработки

        growth_rates = []
        for i in range(1, len(self.population_data)):
            prev_population = self.population_data[i-1]['population']
            current_population = self.population_data[i]['population']
            growth_rate = ((current_population - prev_population) / prev_population) * 100 if prev_population != 0 else 0
            growth_rates.append((self.population_data[i]['year'], growth_rate))

        return growth_rates

    def display_data(self, text_area):
        if not self.population_data:
            text_area.insert(tk.END, "Нет данных для отображения.\n")
            return

        text_area.insert(tk.END, "Данные о численности населения:\n")
        for item in self.population_data:
            text_area.insert(tk.END, f"Год: {item['year']}, Население: {item['population']}\n")

    def create_graph(self, frame):
        if not self.population_data:
            return

        years = [item['year'] for item in self.population_data]
        populations = [item['population'] for item in self.population_data]

        fig, ax = plt.subplots(figsize=(6, 4))  # Create a figure and an axes
        ax.plot(years, populations, marker='o')
        ax.set_xlabel('Год')
        ax.set_ylabel('Численность населения')
        ax.set_title('Численность населения России')
        fig.tight_layout()  # Adjust layout to make room for labels

        canvas = FigureCanvasTkAgg(fig, master=frame)
        canvas.draw()
        canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)



class GUI:
    def __init__(self, master):
        self.master = master
        master.title("Анализ данных")

        self.processor = None #  Current data processor

        # --- File Selection Frame ---
        self.file_frame = tk.Frame(master)
        self.file_frame.pack(pady=10)

        self.file_button = tk.Button(self.file_frame, text="Выбрать файл", command=self.open_file)
        self.file_button.pack(side=tk.LEFT, padx=5)

        self.file_label = tk.Label(self.file_frame, text="Файл не выбран")
        self.file_label.pack(side=tk.LEFT, padx=5)

        # --- Data Display Frame ---
        self.display_frame = tk.Frame(master)
        self.display_frame.pack(pady=10)

        self.text_area = tk.Text(self.display_frame, height=10, width=60)
        self.text_area.pack(side=tk.LEFT, padx=5)

        self.scrollbar = ttk.Scrollbar(self.display_frame, command=self.text_area.yview)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y, padx=5)
        self.text_area['yscrollcommand'] = self.scrollbar.set


        # --- Graph Frame ---
        self.graph_frame = tk.Frame(master)
        self.graph_frame.pack(pady=10)


        # --- Buttons Frame ---
        self.button_frame = tk.Frame(master)
        self.button_frame.pack(pady=10)

        self.display_button = tk.Button(self.button_frame, text="Отобразить данные", command=self.display_data)
        self.display_button.pack(side=tk.LEFT, padx=5)

        self.process_button = tk.Button(self.button_frame, text="Обработать данные", command=self.process_data)
        self.process_button.pack(side=tk.LEFT, padx=5)

        self.graph_button = tk.Button(self.button_frame, text="Показать график", command=self.show_graph)
        self.graph_button.pack(side=tk.LEFT, padx=5)



    def open_file(self):
        filepath = filedialog.askopenfilename(
            filetypes=[("CSV files", "*.csv"), ("TXT files", "*.txt"), ("All files", "*.*")]
        )
        if filepath:
            self.file_label.config(text=filepath)
            self.filepath = filepath
            self.text_area.delete("1.0", tk.END)  # Clear the text area
            self.create_data_processor()

    def create_data_processor(self):
        if not hasattr(self, 'filepath'):
            return # No file selected

        if "currency" in self.filepath.lower():
            self.processor = CurrencyDataProcessor(self.filepath)
        elif "population" in self.filepath.lower():
            self.processor = PopulationDataProcessor(self.filepath)
        elif "tourists" in self.filepath.lower():
            self.processor = TouristDataProcessor(self.filepath)
        else:
            print("Неизвестный формат данных.")  # Handle unsupported file types
            self.processor = None
            return

        if not self.processor.load_data():
            self.processor = None


    def display_data(self):
        self.text_area.delete("1.0", tk.END)  # Clear the text area
        if self.processor:
            self.processor.display_data(self.text_area)
        else:
            self.text_area.insert(tk.END, "Файл не выбран или данные не загружены.\n")


    def process_data(self):
        self.text_area.delete("1.0", tk.END)  # Clear the text area

        if self.processor:
            if isinstance(self.processor, CurrencyDataProcessor):
                results = self.processor.process_data()
                if results:
                    max1, max2, min1, min2 = results
                    self.text_area.insert(tk.END, "Максимальное изменение Валюта1: дата = {}, изменение = {}\n".format(max1['date'], max1['value']))
                    self.text_area.insert(tk.END, "Максимальное изменение Валюта2: дата = {}, изменение = {}\n".format(max2['date'], max2['value']))
                    self.text_area.insert(tk.END, "Минимальное изменение Валюта1: дата = {}, изменение = {}\n".format(min1['date'], min1['value']))
                    self.text_area.insert(tk.END, "Минимальное изменение Валюта2: дата = {}, изменение = {}\n".format(min2['date'], min2['value']))
            elif isinstance(self.processor, PopulationDataProcessor):
                growth_rates = self.processor.process_data()
                if growth_rates:
                    self.text_area.insert(tk.END, "Ежегодный процент прироста/убыли населения:\n")
                    for year, rate in growth_rates:
                        self.text_area.insert(tk.END, f"Год: {year}, Прирост: {rate:.2f}%\n")
        else:
            self.text_area.insert(tk.END, "Файл не выбран или данные не загружены.\n")

    def show_graph(self):
        for widget in self.graph_frame.winfo_children():
            widget.destroy()

        if self.processor:
           self.processor.create_graph(self.graph_frame)
        else:
            self.text_area.insert(tk.END, "Файл не выбран или данные не загружены.\n")


root = tk.Tk()
gui = GUI(root)
root.mainloop()
